<style lang='less'>
  @import '../../common/assets/style/packages/form.wxss';
</style>

<template>
  <db-label :forId='widgetId'>
    {{label}}</db-label>
  <block wx:if='{{plainText}}'>
    <view id='{{widgetId}}' name='{{name}}' maxlength="{{maxLength ? maxLength : '-1'}}" disabled='{{disabled}}' class='{{cssClasses}}'
      style='{{cssStyles}}'>{{value ? value : ''}}</view>
  </block>
  <block wx:else>
    <textarea id='{{widgetId}}' auto-height='{{autoAeight}}' placeholder='{{placeholder}}' readonly='{{readOnly}}' name='{{name}}' value='{{value}}' focus='{{focus}}' placeholder-class='{{placeholderAppearance}}' maxlength="{{maxLength ? maxLength : '-1'}}" disabled='{{disabled}}'
      class='{{cssClasses}}' style='{{cssStyles}}' />
  </block>
</template>

<script>
  import BaseMixin from '../../mixins/base'
  import SpacingMixin from '../../mixins/spacing'
  import FlexMixin from '../../mixins/flex'
  import FloatMixin from '../../mixins/float'
  import BaseComponent from '../baseComponent'
  import DbLabel from '../label/index'
  let sizeMap = {
    small: 'sm',
    large: 'lg'
  }
  export default class Textarea extends BaseComponent {
    mixins = [BaseMixin, SpacingMixin, FlexMixin.item, FloatMixin]
    components = {
      'db-label': DbLabel
    }
    props = this.mixinProps({
      name: {
        type: String,
        value: ''
      },
      value: {
        type: String,
        value: ''
      },
      label: {
        type: String,
        value: ''
      },
      rows: {
        type: Number | String,
        value: ''
      },
      cols: {
        type: Number | String,
        value: ''
      },
      placeholder: {
        type: String,
        value: ''
      },
      placeholderAppearance: {
        type: String,
        value: ''
      },
      required: {
        type: Boolean | String,
        value: false
      },
      disabled: {
        type: Boolean | String,
        value: false
      },
      readOnly: {
        type: Boolean | String,
        value: false
      },
      noResize: {
        type: Boolean | String,
        value: false
      },
      size: {
        type: String,
        value: ''
      },
      focus: {
        type: Boolean | String,
        value: false
      },
      plainText: {
        type: Boolean | String,
        value: false
      },
      maxLength: {
        type: Number | String,
        value: '-1'
      },
      minLength: {
        type: Number | String
      },
      invalidMessage: {
        type: String,
        value: ''
      },
      validMessage: {
        type: String,
        value: ''
      }
    })
    getCssClasses() {
      let cssClasses = [this._getPlaintext(), this._getSize()]
      cssClasses = cssClasses.filter(function(item, index, array) {
        return item !== ''
      })
      return cssClasses.join(' ').trim()
    }
    _getPlaintext() {
      if (this.data.plainText === true || this.data.plainText === 'true') {
        return 'form-control-plaintext'
      }
      return 'form-control'
    }
    _getSize() {
      if (this.data.size && sizeMap[this.data.size]) {
        return 'form-control-' + sizeMap[this.data.size]
      }
      return ''
    }
  }
</script>
